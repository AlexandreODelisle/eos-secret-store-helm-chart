name: Publish Helm Chart

on:
  push:
    tags:
      - "*"

permissions:
  contents: write
  pull-requests: write
  packages: write
  id-token: write
  attestations: write

jobs:
  publish-chart:
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        
      - name: Setup Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: v3.12.3
          
      - name: Install cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        with:
          cosign-release: 'v2.5.3'
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get chart info
        id: chart_info
        run: |
          CHART_NAME=$(helm show chart . | grep '^name:' | cut -d' ' -f2)
          CHART_VERSION=$(helm show chart . | grep '^version:' | awk '{print $2}')
  
          if [ -z "$CHART_NAME" ] || [ -z "$CHART_VERSION" ]; then
            echo "❌ Failed to extract chart information."
            exit 1
          fi
          LOWERCASE_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "oci_registry=$LOWERCASE_OWNER" >> $GITHUB_OUTPUT
          echo "chart_name=$CHART_NAME" >> $GITHUB_OUTPUT
          echo "chart_version=$CHART_VERSION" >> $GITHUB_OUTPUT
          
          echo "Chart: $CHART_NAME"
          echo "Chart Version: $CHART_VERSION" 

      - name: Verify version consistency
        run: |
          if [ ${{ steps.chart_info.outputs.chart_version }} != ${{ github.ref_name }} ]; then
            echo "❌ Version mismatch!"
            echo "  Chart.yaml version: ${{ steps.chart_info.outputs.chart_version }}"
            echo "  Tag version: ${{ github.ref_name }}"
            exit 1
          else
            echo "✅ Version consistency verified: $RELEASE_VERSION"
          fi

      - name: Package and publish chart
        id: publish
        run: |

          
          echo "📦 Adding Helm dependencies..."
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update
          helm dependency build 

          echo "📦 Packaging Helm chart..."
          helm package . 
          CHART_PACKAGE="${{ steps.chart_info.outputs.chart_name }}-${{ steps.chart_info.outputs.chart_version }}.tgz"

          if [ ! -f "$CHART_PACKAGE" ]; then
            echo "❌ Chart package not found: $CHART_PACKAGE"
            exit 1
          fi

          echo "chart_package_path=$CHART_PACKAGE" >> $GITHUB_OUTPUT
          echo "✅ Chart packaged: $CHART_PACKAGE"
          
          OCI_URL="oci://ghcr.io/${{ steps.chart_info.outputs.oci_registry }}"
          echo "📤 Pushing to $OCI_URL"

          helm_push_output=$(helm push "$CHART_PACKAGE" "$OCI_URL" 2>&1)
          
          echo "📦 Fetching digest information..."
          echo $helm_push_output
          DIGEST=$(echo "$helm_push_output" | grep -o 'sha256:[a-z0-9]*')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "✅ Chart published to ghcr.io/${{ steps.chart_info.outputs.oci_registry }}/${{ steps.chart_info.outputs.chart_name }}:${{ steps.chart_info.outputs.chart_version }}"

      - name: Sign chart with cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          CHART_REF="ghcr.io/${{ steps.chart_info.outputs.oci_registry }}/${{ steps.chart_info.outputs.chart_name }}@${{ steps.publish.outputs.digest }}"
          echo "🔐 Signing: $CHART_REF"
          cosign sign --yes "$CHART_REF"
          echo "✅ Chart signed successfully"

      - name: Generate build attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: "ghcr.io/${{ steps.chart_info.outputs.oci_registry }}/${{ steps.chart_info.outputs.chart_name }}"
          subject-digest: ${{ steps.publish.outputs.digest }}
          push-to-registry: true

      - name: Upload chart to release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        if: github.ref_type == 'tag'
        with:
          files: |
            ${{ steps.publish.outputs.chart_package_path }}

      - name: Create success summary
        run: |
          echo "## 🚀 Chart Released Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Chart:** ${{ steps.chart_info.outputs.chart_name }}" >> $GITHUB_STEP_SUMMARY  
          echo "**Version:** ${{ steps.chart_info.outputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ghcr.io/${{ steps.chart_info.outputs.oci_registry }}/${{ steps.chart_info.outputs.chart_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "helm install my-release oci://ghcr.io/${{ steps.chart_info.outputs.oci_registry }}/${{ steps.chart_info.outputs.chart_name }} --version ${{ steps.chart_info.outputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Verification" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "cosign verify ghcr.io/${{ steps.chart_info.outputs.oci_registry }}/${{ steps.chart_info.outputs.chart_name }}:${{ steps.publish.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY